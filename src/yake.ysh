#!/usr/bin/env ysh

source-guard yake || return 0

source $_this_dir/synch.ysh

setglobal tasks = {}
setglobal taskDependentsSema = {}
setglobal taskDependenciesSema = {}

proc M(target, ...dependencies ;;...options; code) {
  setglobal tasks[target] = options
  setglobal tasks[target]['code'] = code
  setglobal taskDependenciesSema[target] = []
  if (not target in taskDependentsSema) {
    setglobal taskDependentsSema[target] = []
  }
  for dependency in (dependencies) {
    if (dependency === target) {
      echo "Cycle dependency detected: $target depends on itself"
      exit 1
    }
    sema-new (0, &semaCur)
    # echo "$semaCur: $target <- $dependency"
    call taskDependenciesSema[target]->append(semaCur)
    if (dependency not in tasks) {
      setglobal taskDependentsSema[dependency] = []
      setglobal tasks[dependency] = null # a place holder
    }
    call taskDependentsSema[dependency]->append(semaCur)
  } 
}

proc _yake(; numJobs = 1) {
  sema-new (numJobs, &jobSema)
  for task, spec in (tasks) {
    fork {
      # Ensure all dependency is satisfied
      for dependencySema in (taskDependenciesSema[task]) {
        sema-down (dependencySema)
        sema-destroy (dependencySema)
      }
      # Ensure we have enough thread
      sema-down (jobSema)
      echo "Executing task '$task':"
      call io->eval (spec.code)
      for dependentSema in (taskDependentsSema[task]) {
        sema-up (dependentSema)
      }
      sema-up (jobSema)
    }
  }
  # TODO: deal with hanging issue
  wait
  sema-destroy (jobSema)
}
